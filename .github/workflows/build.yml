name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cxx: [g++-9, clang++-9]
    steps:
    - uses: actions/checkout@v1
    - name: cmake
      run: CXX=${{ matrix.cxx }} cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release .
    - name: build
      run: make -j4
    - name: test
      run: ./flattests
    - name: upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Linux flatc binary ${{ matrix.cxx }}
        path: flatc

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: cmake
      run: cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_CPP17=ON .
    - name: build
      run: msbuild.exe FlatBuffers.sln /p:Configuration=Release /p:Platform=x64
    - name: test
      run: Release\flattests.exe
    - name: upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Windows flatc binary
        path: Release\flatc.exe


  build-ts:
    name: Build TS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: compile
      run: npm run compile
    - name: test
      working-directory: tests
      run: sh TypeScriptTest.sh

  build-ocaml:
    name: Build OCaml
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ocaml-version:
          - 4.10.1
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use OCaml ${{ matrix.ocaml-version }} on ${{ matrix.os }}
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}
      - name: cmake
        run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release .
      - name: build
        run: make -j4
      - name: test
        run: |
          pwd
          env
          ls -al test
          test/OCamlTest.sh
